package com.mgnrega.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.mgnrega.exception.CredentialException;
import com.mgnrega.exception.EmployeeException;
import com.mgnrega.exception.GramPanchayatException;
import com.mgnrega.exception.ProjectException;
import com.mgnrega.model.Employee;
import com.mgnrega.model.Project;
import com.mgnrega.utility.DBUtility;

public class GPMImplementation implements GPMInterface{
	
	public int gpmID;

	@Override
	public String gmpLogin(String phone, String password) throws CredentialException, GramPanchayatException {
		String result = "Log In failed";
		
		try (Connection conn = DBUtility.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("select * from grampanchayat");
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				
				String phoneNumber = rs.getString("gphone");
				String pass = rs.getString("gpassword");
				
				if(phoneNumber.equals(phone) && pass.equals(password)) {
					result = "login Sucessful!";
					gpmID = rs.getInt("GPID");
					return result;
				}else {
					result = "Wrong Credential";
					throw new CredentialException(result);
				}	
			}
			
		} catch (SQLException e) {
			throw new GramPanchayatException(result);
		}		
		
		return result;
	}

	
	
	
	
	
	@Override
	public String createEmployee(Employee e) throws EmployeeException {
		
		String result ="Employee Not Created.";
		
		try (Connection conn = DBUtility.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("insert into employee(ename,eaddress,edate_joined,ewage) values(?,?,curdate(),?);");
			ps.setString(1, e.getEname());
			ps.setString(2, e.getEaddress());
			ps.setInt(3, e.getEwage());
			
			
			
			int x = ps.executeUpdate();
			
			if(x>0) {
				result = "Employee Created.";
			}else {
				throw new EmployeeException(result);
			}
			
		} catch (SQLException s) {
			throw new EmployeeException("Exception : Check SQL Syntax.");
		}
		
		return result;
	}






	@Override
	public List<Employee> displayAllEmployee() throws EmployeeException {
		List<Employee> empList = new ArrayList<>();
		
		try (Connection conn = DBUtility.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("select * from employee");
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				
				int eid = rs.getInt("eid");
				int egpid = rs.getInt("egpid");
				int epid = rs.getInt("epid");
				String name = rs.getString("ename");
				String address = rs.getString("eaddress");
				Date date = rs.getDate("edate_joined");
				int wage = rs.getInt("ewage");
				
				
				Employee e = new Employee(eid, egpid, epid, name, address, date, wage);
				empList.add(e);
			}
		} catch (SQLException e) {
			throw new EmployeeException("Exception : Check SQL Syntax.");
		}
		
		if(empList.size() ==0) {
			throw new EmployeeException("Exception : No Employeet Found.");
		}
		
		return empList;
	}
}
	
	
	
	
	


